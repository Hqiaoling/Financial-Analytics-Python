# -*- coding: utf-8 -*-
"""Copy of BA865_HW01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12xzUupNO7K4oBD4qrBxEabTAqhlKh4Nk

#HW 01 - Implement Classes to Represent a Book Library

<font color=blue size=4>
Before you submit this assignment, please carefully read the submission instructions in blue text below. You must name this .ipynb file:
<br><br>
yourlastname_yourfirstname_HW1.ipynb
<br><br>
You must turn in this assignment by uploading the 
.ipynb file to the assignment on questrom tools. Do not email me the file.
<br><br>
Points will be deducted for improper submission!
</font>

I have created a Library class to represent a book library.


Your task is to create two classes:
 - A book class called `Book`
 - A patron class (a customer of the library) called `Patron`

These classes will interact with my Library class to facilitate patrons checking out books from the library.
<br><br>

## The Book Class - Specifications
The `Book` class needs to have the following **properties**:
 - `isbn` - a string holding the isbn number of the book
 - `title` - a string holding the title of the book
 - `author` - a string holding the author of the book
<br><br>

## The Patron Class - Specifications
The `Patron` class needs to have:
- the following **properties**:
 - `id` - a string holding the id of the patron
 - `name` - a string holding the name of the patron
 - `booksOnLoan` - a dictionary with key `isbn` and value `bookObject`
- the following **methods**:
 - `checkOutBook(isbn,library)` for checking out a book from a library that takes the arguments:
   - `isbn` - a book isbn number (string)
   - `library` - a library object 
 - `checkInBook(isbn, library)` for checking back in a book to the library that takes the arguments:
   - `isbn` - a book isbn number (string)
   - `library` - a library object
- Both the `checkInBook()` and `checkOutBook()` methods should print out what is happening: 
 - e.g., "Patron Dylan Walker (52103) is checking out B006NZWXO2"
  - follow this format
- Both the `checkInBook()` and `checkOutBook()` methods of patron must call the library's `checkInBook()` and `checkOutBook()` methods and pass the appropriate arguments.
 - Within the code of the `checkInBook()` and `checkOutBook()` methods of patron, you can pass the patron object using the keyword `self` to the library's `checkInBook()` and `checkOutBook()` methods (which both require a patron object as one of their arguments).

<br>

Read over the code that defines my Library class carefully. Make sure you understand it. **You cannot change my Library class at all.**
<br><br>

Some things to note:
- notice how I establish empty dictionaries as properties of `Library` to hold the books, number of copies of each book, and the books that patrons have on loan.
- notice how `Library.checkOutBook()` will return `None` if the book isn't in the library or has no copies currently; otherwise it will return a book object.
- notice how `Library.checkInBook()` will return `False` if the book isn't carried by the Library or if isn't in the library's `patronLoans` (i.e., the patron didn't check out the book from this library); otherwise it will return `True`
- You should make use of these returns when you implement the `checkInBook()` and `checkOutBook()` methods for patron.

Your solution must be able to run properly with the test code that I have provided below. **You cannot change the test code at all.**
"""

# My Library Class
#  You cannot change anything in this class
#  Run this code cell before you run your own below.
class Library():
  def __init__(self):
    self.books = {} # key: isbn ; value: bookObject
    self.bookCopies = {} # key: isbn ; value: numCopies (int)
    self.patronLoans = {} # key: patronId ; value: list of isbn numbers representing the books the patron has checked out
  
  def addBook(self,book,numCopies):
    self.books[book.isbn] = book
    self.bookCopies[book.isbn] = numCopies
  
  def checkOutBook(self,isbn,patron):
    if not isbn in self.books.keys():
      print("Sorry, we don't have that book in the library")
      return None
    elif self.bookCopies[isbn] == 0:
      print(f"Sorry, we don't have any copies of '{self.books[isbn].title}' available. Try back later.")
      return None
    else:
      if not patron.id in self.patronLoans.keys():
        self.patronLoans[patron.id] = [] # patron hasn't checked out a book here before; make an empty list
      self.patronLoans[patron.id].append(isbn)
      self.bookCopies[isbn]-=1
      book = self.books[isbn]
      return book
    
  def checkInBook(self,isbn,patron):
    if not isbn in self.books.keys():
      print("Sorry, we don't carry that book in our library. Maybe you checked it out from a different library?")
      return False
    elif not patron.id in self.patronLoans.keys():
      print("Sorry, we don't have any record of you taking out any books from here. Maybe you check it out from a different library?")
      return False
    elif not isbn in self.patronLoans[patron.id]:
      print(f"Sorry, we don't have any record of you taking out '{self.books[isbn].title}' ({isbn}) from this library. Maybe you checked it out from a different library?")
      return False
    else:
      self.patronLoans[patron.id].remove(isbn)
      self.bookCopies[isbn]+=1
      return True
    
  def printLoans(self):
    print("\nBooks on Loan")
    print("======================================================================================")
    print(f"{'patronId':<12s}{'isbn':<15s}{'title':<35s}{'author'}")
    print("--------------------------------------------------------------------------------------")
    for patronId in self.patronLoans.keys():
      for isbn in self.patronLoans[patronId]:
        bookTitle = self.books[isbn].title
        bookAuthor = self.books[isbn].author
        print(f"{patronId:<12s}{isbn:<15s}{bookTitle:<35s}{bookAuthor}")
    print("======================================================================================\n")
  
  def printBooks(self):
    print("\nBooks in Stock")
    print("======================================================================================")
    print(f"{'copies':<12s}{'isbn':<15s}{'title':<35s}{'author'}")
    print("--------------------------------------------------------------------------------------")
    for isbn, numCopies in self.bookCopies.items():
      print(f"{numCopies:<12d}{isbn:<15s}{self.books[isbn].title:<35s}{self.books[isbn].author}")
    print("======================================================================================\n")

# For you to do:

# Define your Book class
class Book():
  def __init__(self, isbn, title, author):
    self.isbn = isbn
    self.title = title
    self.author = author

# Define your Patron class
class Patron():
  def __init__(self, id, name):
    self.id = id
    self.name = name
    self.booksOnLoan = {}
  
  def checkOutBook(self, isbn, library):
    print(f"Patron {self.name}({self.id}) is checking out {isbn}")
    if library.checkOutBook(isbn, self) is not None:
      self.booksOnLoan[isbn]=library.books[isbn]

  def checkInBook(self, isbn, library):
    print(f"Patron {self.name}({self.id}) is checking in {isbn}")
    if library.checkInBook(isbn, self):
      self.booksOnLoan.pop[isbn]

# TEST CODE - you must be able to run this with the classes you implemented in the above cell.
# You cannot change this code at all

# Create a library
library = Library()

# format: book = Book(isbn,title,author)
book1 = Book('B006NZWXO2','Nothing Lasts Forever', 'Roderick Thorp')
book2 = Book('B00BHBFG0A','58 Minutes', 'Walter Wager')
book3 = Book('B0010SIPT4', 'The Last Wish','Andrzej Sapkowski')
book4 = Book('B004TLHPZ4', 'Summer of Night','Dan Simmons')
book5 = Book('B003XT605Y','The Wind-Up Bird Chronicle','Haruki Murakami')

# Add books to the library
# format: library.addBook(bookObject,numCopies)
print("Adding books...\n")
library.addBook(book1,5)
library.addBook(book2,7)
library.addBook(book3,16)
library.addBook(book4,9)
library.addBook(book5,5)

library.printBooks()

# Create Patrons
# format: patron = Patron(patronId,patronName)
print("Adding patrons...\n")
patron1 = Patron('52103','Dylan Walker')
patron2 = Patron('81032','Kai Zhu')
patron3 = Patron('19322','Hyunuk Kim')
patron4 = Patron('92153','Jiho Lee')

# Display the books checked out from the library by every patron
library.printLoans()

# Patrons check out books
# format patron.checkOutBook(isbn,libraryObject)
print("Patrons checking out books...\n")
patron1.checkOutBook('B006NZWXO2',library)
patron1.checkOutBook('B003XT605Y',library)
patron2.checkOutBook('B0010SIPT4',library)
patron3.checkOutBook('B004TLHPZ4',library)
patron4.checkOutBook('B00BHBFG0A',library)

# Display the books checked out from the library by every patron
library.printLoans()
library.printBooks()

# Patrons check in some books
print("Patrons checking in books...\n")
patron1.checkInBook('B006NZWXO2',library)
patron3.checkInBook('B004TLHPZ4',library)

library.printLoans()
library.printBooks()

# Patron tries to check in a book they didn't check out from the library
print(patron1.booksOnLoan)
patron1.checkInBook('B00BHBFG0A',library)